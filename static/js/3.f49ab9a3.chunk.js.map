{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContanier.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContanier.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","Post","className","classes","mainContent","profile","src","photos","large","messages","likeCount","MyPosts","postsElements","posts","map","p","post","message","id","AddNewPostForm","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContanier","profilesPage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataFormRedux","error","formSummaryError","createField","Input","type","Object","keys","contacts","key","ProfileData","isOwner","onClick","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","Preloader","saveProfile","mainPhoto","target","files","length","savePhoto","initialValues","formData","then","Profile","ProfileContanier","userId","match","params","authorizedUserId","history","push","getUsersProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.f49ab9a3.chunk.js","sourcesContent":["import React from 'react'\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux'\n\n\nlet mapStateToPropsForRedirect = (state) => { //настраивает данные, которые мы возьмем из state\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={'/login'} />;\n            return <Component {...this.props} />\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n    return ConnectedAuthRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contacts\":\"ProfileInfo_contacts__3y62P\",\"formSummaryError\":\"ProfileInfo_formSummaryError__3Pphw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Post_mainContent__1qSVT\"};","import classes from './Post.module.css'\n\nconst Post = (props) => {\n  \n  return (\n\n    <div className={classes.mainContent}>\n      <div>\n        {props && props.profile && <img src={props.profile.photos.large}></img>}\n        {props.messages}\n      </div>\n      <div>{`like ${props.likeCount}`}</div>\n    </div>\n  )\n}\n\nexport default Post","import React from 'react';\nimport classes from './MyPosts.module.css'\nimport Post from './Post/Post'\nimport { Field, reduxForm } from 'redux-form'\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\nimport { Textarea } from '../../common/FormsControls/FormsControl';\n\nclass MyPosts extends React.Component {\n\n  render() {\n    let onAddPost = (values) => {\n      this.props.addPost(values.newPostText);\n      \n    }\n    let profile = this.props.profile\n  \n    let postsElements = this.props.posts.map(p => <Post\n      key={p.id} \n      profile={profile ? profile : ''}\n      className={classes.post} \n      messages={p.message} \n      likeCount={p.likeCount}></Post>)\n\n    return (\n      <div className={classes.mainContent}>\n        <h3>My Posts</h3>\n        <AddNewPostForm onSubmit={onAddPost}></AddNewPostForm>\n        <div className={classes.posts}>\n          {postsElements}\n        </div>\n      </div>\n    )\n  }\n}\n\n\nconst maxLength10 = maxLengthCreator(10)\nconst addNewPostForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <Field\n        component={Textarea}\n        name='newPostText'\n        placeholder={'Enter your post'}\n        validate={[required, maxLength10]}></Field>\n      <div><button>add</button></div>\n    </form>\n  )\n}\n\nconst AddNewPostForm = reduxForm({ form: 'ProfileAddNewPostForm' })(addNewPostForm)\n\nexport default MyPosts","import React from 'react';\nimport { addPostActionCreator, } from '../../../redux/profile-reducer';\nimport MyPosts from './MyPosts';\nimport { connect } from 'react-redux'\n\n\nlet mapStateToProps = (state) => {\n  return {\n    posts: state.profilesPage.posts,\n    newPostText: state.profilesPage.newPostText\n  }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPostText) => {\n      dispatch(addPostActionCreator(newPostText))\n    },\n\n  }\n}\n\nconst MyPostsContanier = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContanier","import React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport classes from './ProfileStatusWithHooks.module.css'\n\nconst ProfileStatusWithHooks = (props) => {\n\n    /*     //useState возвращает массив\n        let stateArray = useState(false)\n        debugger\n        let editMode = stateArray[0] //занчение, которое кидаем в useState\n        let setEditMode = stateArray[1] //функция, которое будет менять значение, \n                                        //после того как эта функция изменит значение реакт сделает перерисовку всей компоненты */\n\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [])\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deActivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n\n    }\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div> <span>  </span>\n            {!editMode &&\n                <div>\n                    <b>Status:</b><span className={classes.status} onDoubleClick={activateEditMode}>{props.status || '-------'}</span>\n                </div>}\n\n            {editMode &&\n                <div>\n                    <b>Status:</b><input onChange={onStatusChange} onBlur={deActivateEditMode} autoFocus={true} value={status} />\n                </div>}\n\n        </div>\n    )\n}\nexport default ProfileStatusWithHooks","import { createField, Input, Textarea } from \"../../common/FormsControls/FormsControl\"\nimport { reduxForm } from \"redux-form\";\nimport classes from './ProfileInfo.module.css'\n\n\n\nconst ProfileDataForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div><button>save</button></div>\n            {props.error && <div className={classes.formSummaryError}>\n                {props.error}\n            </div>}\n            <div>\n                <b>full name:</b> {createField('Full name', 'fullName', [], Input)}\n            </div>\n\n            <div>\n                <b>looking for a job:</b> {createField('', 'lookingForAJob', [], Input, { type: 'checkbox' })}\n            </div>\n\n            <div>\n                <b>my professional skills: </b>{createField('my professional skills', 'lookingForAJobDescription', [], Textarea)}\n            </div>\n\n            <div>\n                <b>about me: </b>{createField('about me', 'aboutMe', [], Textarea)}\n            </div>\n            <div><b>Contacts:</b> {Object.keys(props.profile.contacts).map(key => {\n                return <div key={key} className={classes.contacts}>\n                    <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\n                </div>\n            })}</div>\n\n        </form>\n    )\n}\nconst ProfileDataFormRedux = reduxForm({ form: \"edit-profile\" })(ProfileDataForm);\nexport default ProfileDataFormRedux","import React from 'react';\nimport { useState } from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport classes from './ProfileInfo.module.css'\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport ProfileDataForm from './ProfileDataForm'\nimport { saveProfile } from '../../../redux/profile-reducer';\n\nconst ProfileInfo = (props) => {\n  let [editMode, setEditMode] = useState(false)\n\n  const goToEditMode = () => {\n    setEditMode(true)\n  }\n  const goOutEditeMode = () => {\n    setEditMode(false)\n  }\n\n  if (!props.profile) {\n    return <Preloader></Preloader>\n  }\n  const mainPhotoSelected = (e) => {\n    if (e.target.files.length) {\n      props.savePhoto(e.target.files[0])\n    }\n  }\n\n  const saveProfile = props.saveProfile\n  const onSubmit = (formData) => {\n    saveProfile(formData).then(\n      () => {\n        setEditMode(false)\n      }\n    )\n  }\n\n  return (\n    <div>\n      <div className={classes.ProfileInfo}>\n        <div>{'Имя: ' + props.profile.fullName}</div>\n        <img src={props.profile.photos.large != null ? props.profile.photos.large : 'https://socpartnerstvo.org/img/avatar_male.png'}\n          className={classes.mainPhoto} />\n        {props.isOwner && <input type={'file'} onChange={mainPhotoSelected} />}\n\n        {editMode ? <ProfileDataForm initialValues={props.profile} onSubmit={onSubmit} {...props}></ProfileDataForm> : <ProfileData {...props} goToEditMode={goToEditMode}></ProfileData>}\n        <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\n      </div>\n    </div>\n  )\n}\n\nconst ProfileData = (props) => {\n  return (\n    <div>\n      {props.isOwner && <div><button onClick={props.goToEditMode}>edit</button></div>}\n      <div><b>full name:</b> {props.profile.fullName ? props.profile.fullName : 'no'}</div>\n      <div><b>looking for a job: </b>{props.profile.lookingForAJob ? 'yes' : 'no'}</div>\n\n      {props.profile.lookingForAJob &&\n        <div><b>my professional skills: </b>{props.profile.lookingForAJobDescription}</div>}\n\n      <div><b>about me: </b>{props.profile.aboutMe ? props.profile.aboutMe : 'no'}</div>\n\n      <div><b>Contacts:</b> {Object.keys(props.profile.contacts).map(key => {\n        return <Contact key={key} contactTitle={key + ':'} contactValue={props.profile.contacts[key]} />\n      })}</div>\n\n    </div>\n  )\n}\n\n\nconst Contact = ({ contactTitle, contactValue }) => {\n\n  return (\n    <div className={classes.contacts}><b>{contactTitle}</b> {contactValue}</div>\n  )\n}\n\nexport default ProfileInfo","import MyPostsContanier from \"./MyPosts/MyPostsContanier\";\nimport classes from \"./Profile.module.css\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nconst Profile = (props) => {\n  return (\n    <div>\n      <ProfileInfo\n        savePhoto={props.savePhoto}\n        isOwner={props.isOwner}\n        profile={props.profile}\n        status={props.status}\n        saveProfile={props.saveProfile}\n        updateStatus={props.updateStatus}\n      ></ProfileInfo>\n      <MyPostsContanier profile={props.profile}></MyPostsContanier>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport { Redirect } from \"react-router\";\nimport * as axios from \"axios\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport {\n  getUsersProfile,\n  getStatus,\n  updateStatus,\n  savePhoto,\n  saveProfile,\n} from \"../../redux/profile-reducer\";\nimport { withRouter } from \"react-router\";\nimport { usersAPI } from \"../../api/api\";\nimport { withAuthRedirect } from \"./../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nclass ProfileContanier extends React.Component {\n\n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        //меняем url\n        this.props.history.push('/login')\n      }\n    }\n    this.props.getUsersProfile(userId);\n    this.props.getStatus(userId);\n  }\n  componentDidMount() {\n    this.refreshProfile()\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\n      this.refreshProfile()\n    }\n  }\n\n  render() {\n    return (\n      <Profile\n        {...this.props}\n        isOwner={!this.props.match.params.userId}\n        profile={this.props.profile}\n        status={this.props.status}\n        updateStatus={this.props.updateStatus}\n        savePhoto={this.props.savePhoto}\n      ></Profile>\n    );\n  }\n}\n\nlet mapStateToProps = (state) => ({\n  profile: state.profilesPage.profile,\n  status: state.profilesPage.status,\n  authorizedUserId: state.auth.id,\n  isAuth: state.auth.isAuth,\n});\n\nexport default compose(\n  connect(mapStateToProps, { getUsersProfile, getStatus, updateStatus, savePhoto, saveProfile }),\n  withRouter\n  //withAuthRedirect\n)(ProfileContanier);\n"],"sourceRoot":""}