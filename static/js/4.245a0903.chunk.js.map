{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsItem/DialogsItem.module.css","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogsItem/DialogsItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContanier.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","Message","className","classes","message","DialogsItem","dialog","active","id","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","console","log","sendMessage","newMessageElement","compose","dispatch","sendMessageActionCreator"],"mappings":"2NAKIA,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIdE,EAAmB,SAACC,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAKC,MAAMN,OACT,cAACG,EAAD,eAAeE,KAAKC,QADI,cAAC,IAAD,CAAUC,GAAI,eAHV,GACXC,IAAML,WAStC,OAFqCM,YAAQX,EAARW,CAAoCL,K,oBClB7EM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,oBCA9DD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,oBCA9DD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,OAAS,8B,0ECOnDC,EANC,SAACN,GACb,OACI,qBAAKO,UAAWC,IAAQC,QAAxB,SAAkCT,EAAMS,W,4DCQjCC,EARK,SAACV,GACjB,OACI,qBAAKO,UAAWC,IAAQG,OAAQ,IAAKH,IAAQI,OAA7C,SACI,cAAC,IAAD,CAASX,GAAI,YAAcD,EAAMa,GAAjC,SAAsCb,EAAMc,U,kCC6BlDC,EAAcC,YAAiB,IAc/BC,EAAsBC,YAAU,CAAEC,KAAM,yBAAlBD,EAbL,SAAClB,GACpB,OACI,uBAAMoB,SAAUpB,EAAMqB,aAAtB,UACI,cAACC,EAAA,EAAD,CACIC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBD,KAAK,oBACLa,YAAa,uBACjB,8BAAK,kDAOFC,EA1CC,SAAC5B,GACb,IAAIP,EAAQO,EAAM6B,YAEdC,EAAkBrC,EAAMsC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAanB,KAAMmB,EAAEnB,KAAiBD,GAAIoB,EAAEpB,IAAZoB,EAAEpB,OAC3EqB,EAAmBzC,EAAM0C,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAS3B,QAAS2B,EAAE3B,SAAc2B,EAAEvB,OAOnF,OAAKb,EAAMN,OAGP,sBAAKa,UAAWC,IAAQuB,QAAxB,UACI,qBAAKxB,UAAWC,IAAQ6B,aAAxB,SACKP,IAEL,sBAAKvB,UAAWC,IAAQ2B,SAAxB,UACKD,EACD,cAACjB,EAAD,CAAqBG,SAdb,SAACkB,GACjBC,QAAQC,IAAI,SACZxC,EAAMyC,YAAYH,EAAOI,4BAGH,cAAC,IAAD,CAAUzC,GAAI,Y,yBCG7B0C,sBACXxC,aAbkB,SAACV,GACnB,MAAO,CACHoC,YAAapC,EAAMoC,gBAIF,SAACe,GACtB,MAAO,CACHH,YAAa,SAACC,GAAwBE,EAASC,YAAyBH,SAM5E9C,IAFW+C,CAGbf","file":"static/js/4.245a0903.chunk.js","sourcesContent":["import React from 'react'\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux'\n\n\nlet mapStateToPropsForRedirect = (state) => { //настраивает данные, которые мы возьмем из state\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={'/login'} />;\n            return <Component {...this.props} />\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n    return ConnectedAuthRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Message_dialogs__2BZUu\",\"active\":\"Message_active__3KMb1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"active\":\"Dialogs_active__2sQhs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"DialogsItem_dialogs__3fY_z\",\"active\":\"DialogsItem_active__2N6yg\"};","import classes from './Message.module.css'\n\nconst Message = (props) => {\n    return (\n        <div className={classes.message}>{props.message}</div>\n    )\n}\n\nexport default Message","import { NavLink } from 'react-router-dom'\nimport classes from './DialogsItem.module.css'\n\n\nconst DialogsItem = (props) => {\n    return (\n        <div className={classes.dialog +' '+ classes.active}>\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogsItem","import React from 'react'\nimport { Redirect } from 'react-router'\nimport classes from './Dialogs.module.css'\nimport DialogsItem from './DialogsItem/DialogsItem'\nimport Message from './Message/Message'\nimport { Field, reduxForm } from 'redux-form';\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\nimport { Textarea } from './../common/FormsControls/FormsControl.js'\n\n\nconst Dialogs = (props) => {\n    let state = props.dialogsPage\n\n    let dialogsElements = state.dialogs.map(d => <DialogsItem name={d.name} key={d.id} id={d.id}></DialogsItem>)\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}></Message>)\n\n    let addNewMessage = (values) => {\n        console.log('hello')\n        props.sendMessage(values.newMessageElement)\n    }\n\n    if (!props.isAuth) return <Redirect to={'/login'} />;\n\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={classes.messages}>\n                {messagesElements}\n                <AddMessageFormRedux onSubmit={addNewMessage} />\n            </div>\n        </div>\n    )\n}\n\nconst maxLength50 = maxLengthCreator(50)\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field\n                component={Textarea}\n                validate={[required, maxLength50]}\n                name='newMessageElement'\n                placeholder={'Enter your message'}></Field>\n            <div><button>send</button></div>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm({ form: 'dialogsAddMessageForm' })(AddMessageForm)\n\nexport default Dialogs","import React from 'react'\nimport Message from './Message/Message'\nimport { sendMessageActionCreator } from '../../redux/dialogs-reducer'\nimport Dialogs from './Dialogs'\nimport StoreContext from '../../StoreContext'\nimport { connect } from 'react-redux'\nimport { withAuthRedirect } from './../../hoc/withAuthRedirect'\nimport { compose } from 'redux'\n\n\n\n\nlet mapStateToProps = (state) => { //настраивает данные, которые мы возьмем из state\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => { //настраивает callback'и которые мы будет отправлять в нашу презентационную компоненту\n    return {\n        sendMessage: (newMessageElement) => { dispatch(sendMessageActionCreator(newMessageElement)) }\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)"],"sourceRoot":""}